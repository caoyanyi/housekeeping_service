// 本地版本的Axios
// 这是一个使用真实fetch API的axios库实现

const axios = {
  defaults: {
    baseURL: '',
    headers: {
      post: {}
    }
  },
  interceptors: {
    request: {
      use: function(onFulfilled, onRejected) {
        // 记录请求拦截器
        this.onFulfilled = onFulfilled;
        this.onRejected = onRejected;
        return [onFulfilled, onRejected];
      }
    },
    response: {
      use: function(onFulfilled, onRejected) {
        // 记录响应拦截器
        this.onFulfilled = onFulfilled;
        this.onRejected = onRejected;
        return [onFulfilled, onRejected];
      }
    }
  },
  get: function(url, config) {
    return this.request({
      method: 'GET',
      url: url,
      ...config
    });
  },
  post: function(url, data, config) {
    return this.request({
      method: 'POST',
      url: url,
      data: data,
      ...config
    });
  },
  put: function(url, data, config) {
    return this.request({
      method: 'PUT',
      url: url,
      data: data,
      ...config
    });
  },
  delete: function(url, config) {
    return this.request({
      method: 'DELETE',
      url: url,
      ...config
    });
  },
  request: function(config) {
    // 应用请求拦截器
    if (this.interceptors.request.onFulfilled) {
      try {
        config = this.interceptors.request.onFulfilled(config);
      } catch (error) {
        if (this.interceptors.request.onRejected) {
          return Promise.reject(this.interceptors.request.onRejected(error));
        }
        return Promise.reject(error);
      }
    }
    
    // 构建完整URL
    let fullUrl = config.url;
    if (this.defaults.baseURL && !config.url.startsWith('http')) {
      fullUrl = this.defaults.baseURL + (config.url.startsWith('/') ? '' : '/') + config.url;
    }
    
    // 处理查询参数
    if (config.params) {
      const searchParams = new URLSearchParams();
      Object.keys(config.params).forEach(key => {
        if (config.params[key] !== undefined && config.params[key] !== null) {
          searchParams.append(key, config.params[key]);
        }
      });
      const paramsString = searchParams.toString();
      if (paramsString) {
        fullUrl += (fullUrl.includes('?') ? '&' : '?') + paramsString;
      }
    }
    
    console.log(`[Axios] 发送真实请求: ${config.method} ${fullUrl}`);
    
    // 准备fetch选项
    const fetchOptions = {
      method: config.method || 'GET',
      headers: config.headers || this.defaults.headers,
      credentials: 'include' // 包含cookies
    };
    
    // 设置Content-Type默认值
    if (!fetchOptions.headers['Content-Type'] && config.method && ['POST', 'PUT', 'PATCH'].includes(config.method.toUpperCase())) {
      fetchOptions.headers['Content-Type'] = 'application/json';
    }
    
    // 处理请求体
    if (config.data && fetchOptions.headers['Content-Type'] === 'application/json') {
      fetchOptions.body = JSON.stringify(config.data);
    } else if (config.data instanceof FormData) {
      // 对于FormData，不需要设置Content-Type，浏览器会自动设置
      fetchOptions.body = config.data;
      delete fetchOptions.headers['Content-Type'];
    } else if (config.data) {
      fetchOptions.body = config.data;
    }
    
    // 发送真实的HTTP请求
    return new Promise((resolve, reject) => {
      fetch(fullUrl, fetchOptions)
        .then(response => {
          // 检查响应状态
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          
          // 尝试解析JSON响应
          return response.json().catch(() => {
            // 如果响应不是JSON格式，返回空对象
            return {};
          }).then(data => ({
            data: data,
            status: response.status,
            statusText: response.statusText,
            headers: response.headers,
            config: config
          }));
        })
        .then(response => {
          // 应用响应拦截器
          if (this.interceptors.response.onFulfilled) {
            try {
              const processedResponse = this.interceptors.response.onFulfilled(response);
              resolve(processedResponse);
            } catch (error) {
              if (this.interceptors.response.onRejected) {
                reject(this.interceptors.response.onRejected(error));
              } else {
                reject(error);
              }
            }
          } else {
            resolve(response);
          }
        })
        .catch(error => {
          console.error(`[Axios] 请求失败: ${error.message}`);
          if (this.interceptors.response.onRejected) {
            reject(this.interceptors.response.onRejected(error));
          } else {
            reject(error);
          }
        });
    });
  }
};

// 挂载到window对象
window.axios = axios;